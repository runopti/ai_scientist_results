# Title: The Impact of Weight Initialization Strategies on Error Diffusion Learning
# Experiment description: Implement several weight initialization strategies (e.g., Xavier, He, uniform random, normal distribution) in the init_network function. Include a baseline using the default initialization. Train the neural network on xor, gaussian, spiral, and circle datasets using these initialization methods. Compare the training dynamics, convergence speed, and final performance for each initialization strategy. Modify the init_network method in the NeuralNetwork class to incorporate these strategies. Track metrics such as training loss, accuracy, and time to convergence consistently across different runs. Analyze and compare the results.
## Run 0: Baseline
Results: {'gaussian_sigmoid': {'eval_loss': 0.12584123714259238, 'accuracy': 0.965, 'train_accuracies': [0.775, 0.975, 0.98, 0.98, 0.98, 0.98, 0.98, 0.98, 0.98, 0.98, 0.98, 0.98, 0.98, 0.98, 0.98, 0.98, 0.98, 0.98, 0.98, 0.98, 0.98, 0.98, 0.98, 0.98, 0.98, 0.98, 0.98, 0.98, 0.98, 0.98, 0.98, 0.98, 0.98, 0.98, 0.98, 0.98, 0.98, 0.98, 0.98, 0.975]}, 'xor_sigmoid': {'eval_loss': 0.4999115224052404, 'accuracy': 0.47, 'train_accuracies': [0.485, 0.495, 0.44499999999999995, 0.47, 0.475, 0.475, 0.47, 0.475, 0.475, 0.475, 0.475, 0.475, 0.485, 0.475, 0.475, 0.475, 0.47, 0.47, 0.46499999999999997, 0.47, 0.45999999999999996, 0.45999999999999996, 0.45499999999999996, 0.45999999999999996, 0.45999999999999996, 0.46499999999999997, 0.45999999999999996, 0.45999999999999996, 0.45999999999999996, 0.46499999999999997, 0.45999999999999996, 0.45499999999999996, 0.45499999999999996, 0.45499999999999996, 0.45499999999999996, 0.45499999999999996, 0.45499999999999996, 0.44999999999999996, 0.44999999999999996, 0.44999999999999996]}, 'circle_sigmoid': {'eval_loss': 0.49389485126461463, 'accuracy': 0.54, 'train_accuracies': [0.5700000000000001, 0.565, 0.565, 0.565, 0.565, 0.565, 0.565, 0.56, 0.56, 0.56, 0.56, 0.565, 0.565, 0.565, 0.565, 0.565, 0.565, 0.565, 0.565, 0.565, 0.565, 0.565, 0.565, 0.565, 0.565, 0.565, 0.565, 0.565, 0.565, 0.565, 0.565, 0.565, 0.565, 0.565, 0.565, 0.565, 0.565, 0.565, 0.565, 0.565]}, 'spiral_sigmoid': {'eval_loss': 0.46828764626424857, 'accuracy': 0.66, 'train_accuracies': [0.515, 0.5800000000000001, 0.585, 0.575, 0.585, 0.5900000000000001, 0.5900000000000001, 0.5900000000000001, 0.5900000000000001, 0.605, 0.605, 0.605, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.6, 0.595, 0.595, 0.595, 0.595, 0.595, 0.595, 0.595, 0.595, 0.595, 0.595, 0.5900000000000001]}}
Description: Baseline results.

## Run 1: Xavier Initialization
Results: {'gaussian_sigmoid': {'eval_loss': 0.12912181673303683, 'accuracy': 0.985, 'train_accuracies': [0.885, 0.96, 0.965, 0.96, 0.96, 0.96, 0.96, 0.96, 0.96, 0.96, 0.96, 0.96, 0.96, 0.96, 0.96, 0.96, 0.96, 0.96, 0.96, 0.96, 0.96, 0.96, 0.96, 0.96, 0.96, 0.96, 0.96, 0.96, 0.96, 0.96, 0.96, 0.96, 0.96, 0.96, 0.96, 0.96, 0.96, 0.96, 0.96, 0.96]}, 'xor_sigmoid': {'eval_loss': 0.49937428556902214, 'accuracy': 0.47, 'train_accuracies': [0.46499999999999997, 0.43000000000000005, 0.43999999999999995, 0.43500000000000005, 0.43500000000000005, 0.43999999999999995, 0.43999999999999995, 0.43999999999999995, 0.44499999999999995, 0.44499999999999995, 0.43999999999999995, 0.43999999999999995, 0.43999999999999995, 0.43999999999999995, 0.43999999999999995, 0.43500000000000005, 0.43999999999999995, 0.43999999999999995, 0.44499999999999995, 0.42500000000000004, 0.43000000000000005, 0.43000000000000005, 0.42000000000000004, 0.41500000000000004, 0.41500000000000004, 0.41500000000000004, 0.41500000000000004, 0.42000000000000004, 0.42500000000000004, 0.42500000000000004, 0.42000000000000004, 0.43000000000000005, 0.43000000000000005, 0.43000000000000005, 0.43500000000000005, 0.43999999999999995, 0.43999999999999995, 0.43999999999999995, 0.43500000000000005, 0.43500000000000005]}, 'circle_sigmoid': {'eval_loss': 0.4931189806623641, 'accuracy': 0.45, 'train_accuracies': [0.43999999999999995, 0.385, 0.375, 0.365, 0.385, 0.39, 0.39, 0.375, 0.385, 0.39, 0.4, 0.4, 0.4, 0.4, 0.4, 0.4, 0.395, 0.395, 0.395, 0.39, 0.4, 0.4, 0.4, 0.405, 0.405, 0.405, 0.41000000000000003, 0.42000000000000004, 0.42000000000000004, 0.42000000000000004, 0.41500000000000004, 0.41500000000000004, 0.41500000000000004, 0.41000000000000003, 0.41000000000000003, 0.41000000000000003, 0.4, 0.4, 0.395, 0.395]}, 'spiral_sigmoid': {'eval_loss': 0.47235121622799364, 'accuracy': 0.61, 'train_accuracies': [0.515, 0.55, 0.575, 0.565, 0.5549999999999999, 0.56, 0.5549999999999999, 0.56, 0.5549999999999999, 0.5549999999999999, 0.5549999999999999, 0.5549999999999999, 0.56, 0.565, 0.565, 0.56, 0.56, 0.56, 0.56, 0.56, 0.55, 0.55, 0.55, 0.55, 0.55, 0.55, 0.55, 0.5549999999999999, 0.5549999999999999, 0.5549999999999999, 0.5549999999999999, 0.5549999999999999, 0.5549999999999999, 0.5549999999999999, 0.5549999999999999, 0.5549999999999999, 0.5549999999999999, 0.5549999999999999, 0.55, 0.55]}}
Description: Xavier initialization results.

## Run 4: Normal Initialization
Results: {'gaussian_sigmoid': {'eval_loss': 0.1103714672320171, 'accuracy': 0.975, 'train_accuracies': [0.85, 0.965, 0.97, 0.975, 0.975, 0.975, 0.975, 0.975, 0.975, 0.975, 0.975, 0.975, 0.975, 0.975, 0.975, 0.975, 0.975, 0.975, 0.975, 0.975, 0.975, 0.975, 0.975, 0.975, 0.975, 0.975, 0.975, 0.975, 0.975, 0.975, 0.975, 0.975, 0.975, 0.975, 0.975, 0.975, 0.975, 0.975, 0.975, 0.975]}, 'xor_sigmoid': {'eval_loss': 0.4998445389425816, 'accuracy': 0.515, 'train_accuracies': [0.5449999999999999, 0.56, 0.56, 0.56, 0.56, 0.56, 0.56, 0.56, 0.56, 0.56, 0.56, 0.56, 0.56, 0.56, 0.56, 0.56, 0.56, 0.56, 0.56, 0.56, 0.56, 0.56, 0.56, 0.56, 0.56, 0.56, 0.56, 0.56, 0.56, 0.56, 0.56, 0.56, 0.56, 0.56, 0.56, 0.565, 0.565, 0.565, 0.565, 0.565]}, 'circle_sigmoid': {'eval_loss': 0.4959527019091548, 'accuracy': 0.56, 'train_accuracies': [0.525, 0.5349999999999999, 0.5349999999999999, 0.5349999999999999, 0.5349999999999999, 0.5349999999999999, 0.525, 0.525, 0.515, 0.515, 0.515, 0.515, 0.52, 0.52, 0.52, 0.52, 0.53, 0.5349999999999999, 0.5349999999999999, 0.5349999999999999, 0.5349999999999999, 0.5349999999999999, 0.5349999999999999, 0.5349999999999999, 0.5349999999999999, 0.5349999999999999, 0.5349999999999999, 0.5349999999999999, 0.5349999999999999, 0.5349999999999999, 0.5349999999999999, 0.5349999999999999, 0.5349999999999999, 0.5349999999999999, 0.5349999999999999, 0.5349999999999999, 0.53, 0.515, 0.515, 0.51]}, 'spiral_sigmoid': {'eval_loss': 0.47460539786315714, 'accuracy': 0.6, 'train_accuracies': [0.5, 0.565, 0.5800000000000001, 0.5800000000000001, 0.5800000000000001, 0.5800000000000001, 0.5900000000000001, 0.595, 0.595, 0.595, 0.595, 0.595, 0.5900000000000001, 0.5900000000000001, 0.585, 0.585, 0.585, 0.5900000000000001, 0.5900000000000001, 0.5900000000000001, 0.5900000000000001, 0.5900000000000001, 0.5900000000000001, 0.5900000000000001, 0.585, 0.585, 0.5800000000000001, 0.5800000000000001, 0.5800000000000001, 0.5800000000000001, 0.5800000000000001, 0.5800000000000001, 0.5800000000000001, 0.5800000000000001, 0.5800000000000001, 0.5800000000000001, 0.5800000000000001, 0.5800000000000001, 0.5800000000000001, 0.5800000000000001]}}
Description: Normal initialization results.

# Plot Descriptions
## Plot 1: Training Accuracy Over Time
Filename: train_acc.png
Description: This plot shows the training accuracy over time for each dataset (Gaussian, XOR, Circle, Spiral) across different initialization strategies. Each subplot represents a different dataset, and the lines within each subplot represent the training accuracy for each initialization strategy over the training epochs. This plot helps to visualize how quickly and effectively each initialization strategy allows the neural network to learn the training data.

## Plot 2: Decision Boundaries
Filename: generated_images.png
Description: This plot visualizes the decision boundaries learned by the neural network for each dataset (Gaussian, XOR, Circle, Spiral) across different initialization strategies. Each row represents a different initialization strategy, and each column represents a different dataset. The contour plots show the decision boundaries, and the scatter plots show the actual data points. The title of each subplot includes the test accuracy for that particular combination of dataset and initialization strategy. This plot helps to understand how well the neural network has learned to separate the different classes in the data.
